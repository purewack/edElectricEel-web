/*
TODO:
    (x = finished)
    1.debugging console [x]
    2.console commands [x]
    3.main menu [x]
    4.options menu []
    5.profiles menu []
    6.game modes[]
    7.snake collision []
    8.snake object [x]
    9.music []
    10.sfx []
    11.profile proggress/graph []
    12.core logic [x]
    13.button object [x]
    14.popup object [x]
    15.key and mouse events for popups [x]
    16.fix autogen config null exception []
    17.fix looping realease button[x]
    18.better sprites[x]
    19.animation[x]
    20.label object[x]
    21.textField object[x]
    22.scrollingMenu object[x]
    23.superclass Component for all components [x]
    24.listmenu [x]
    25.componentgroup [x]
    26.component row [x]
    27.rewrite events []
    28.compiledScenes []

Gamemodes:
    1.classic arcade snake [] SP
    2.tron like snake[] MP 
    3.spelling snake [] SP
    4.simple maths [] SP
    5.times table [] SP
    6.grammar [] SP
    7.pre and suf fixes[] SP
    8.
 */
package snakeed;

import snakeed.scene.*;
import snakeed.component.*;
import snakeed.readyScreens.*;
import java.awt.event.KeyEvent;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Stack;
import javax.swing.JFrame;

public class Engine extends JFrame implements ActionListener{

    private static double revisionVer = 3.901;
    
    
    public Engine() {
        initComponents();
        prepare();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gPanel = new GraphicsPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 0, 51));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("SnakeFrame"); // NOI18N
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout gPanelLayout = new javax.swing.GroupLayout(gPanel);
        gPanel.setLayout(gPanelLayout);
        gPanelLayout.setHorizontalGroup(
            gPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 572, Short.MAX_VALUE)
        );
        gPanelLayout.setVerticalGroup(
            gPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 537, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_BACK_QUOTE){
            graphicsPanel.toggleConsole();
            if(graphicsPanel.consoleMode){
            sceneStack.peek().freeze();
            sceneStack.peek().sceneTick.setActionCommand("console");
            }
            else{
            sceneStack.peek().sceneTick.setActionCommand("console_folding");
            }
        }
        else{
            if(sceneStack.peek().sceneTick.getActionCommand().equals("debug_ingame")){
                if(evt.getKeyCode() == KeyEvent.VK_SPACE){
                sceneStack.peek().sceneTick.setActionCommand("console");
                graphicsPanel.consoleTransparency = 170;
                }
            }
            if(!graphicsPanel.consoleMode || sceneStack.peek().sceneTick.getActionCommand().equals("debug_ingame")){
                sceneStack.peek().onKeypress(evt);
            }
            else{
                if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                    executeCommand(DebugConsole.getInputLine());
                }
                else if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE){
                    DebugConsole.backspace();
                }
                else if(evt.getKeyCode() == KeyEvent.VK_UP){
                    DebugConsole.previousCommand(true);
                }
                else if(evt.getKeyCode() == KeyEvent.VK_DOWN){
                    DebugConsole.previousCommand(false);
                }
                else if(evt.getKeyCode() == KeyEvent.VK_SPACE && sceneStack.peek().sceneTick.getActionCommand().equals("debug_ingame")){
                    sceneStack.peek().sceneTick.setActionCommand("console");
                    graphicsPanel.consoleTransparency = 170;
                }
                else if(isAlphaNumeric(evt)){
                    if(DebugConsole.getInputLine().length() < 80){
                    DebugConsole.addToInputLine(evt.getKeyChar());
                    }
                }
                graphicsPanel.repaint();
            }
        }
        
    }//GEN-LAST:event_formKeyPressed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if(!graphicsPanel.consoleMode){
        sceneStack.peek().onMousePress(evt);
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if(!graphicsPanel.consoleMode){
        sceneStack.peek().onMouseRelease(evt);
        }
    }//GEN-LAST:event_formMouseReleased

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        if(!graphicsPanel.consoleMode){
        sceneStack.peek().onMouseMove(evt);
        }
    }//GEN-LAST:event_formMouseMoved

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        if(sceneStack.peek() instanceof ScrollMenu){
            ((ScrollMenu)sceneStack.peek()).onMouseWheelChange(evt);
            sceneStack.peek().onMouseMove(evt);
        }   
    }//GEN-LAST:event_formMouseWheelMoved

    @Override
    public void actionPerformed(ActionEvent e) {
       switch(e.getActionCommand()){
            
//            case "buttonPressed":
//                Button b = (Button)e.getSource();
//                if(b.text.equals("Single Player")){
//                    sceneStack.push(arcadeLevel); 
//                    graphicsPanel.setSceneToPaint(sceneStack.peek(), true);
//                    this.setSize(sceneStack.peek().getScreenSize());
//                }
//                else if(b.text.equals("Go Back")){
//                    goBack();
//                }
//                break;
            case "exit":
                onExit();
                break;
            case "back":
                goBack();
                break;
            case "":
                break;
        }
       
    }
 
    
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
           
            @Override
            public void run() {
                    
                    JFrame j = new Engine();
                    j.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                    j.setVisible(true);
                    j.getContentPane().setBackground(Color.BLACK);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel gPanel;
    // End of variables declaration//GEN-END:variables

    private final double VERSION = 3.6;
    private final int BUILD = 370;
    
    private Random r;
    
    private Stack<Scene> sceneStack;
    private boolean resizable = false;
    
    private Menu mainMenu;
    private ScrollMenu optionsMenu;
    private Level arcadeLevel;
    
    private ArrayList<Snake> players;
    private Collectable apple;
    private GraphicsPanel graphicsPanel;
    private Options opt;
    private DebugConsole console;
    public static Insets ins;
    public static boolean debugScene = false;
    public static int ACTION_ID_BUTTON = 10;
    public static int ACTION_ID_SCENE = 11;
    private int snakeLength = 3;

    private void prepare() {
        console = new DebugConsole();
        opt = new Options();
        opt.changeGeneral("english_difficulty", 5);
        opt.writeChanges();
        sceneStack = new Stack<>();
        ins = this.getInsets();
        this.setResizable(resizable);
        
//            Toolkit toolkit = Toolkit.getDefaultToolkit();
//            Image image = toolkit.getImage(Engine.class.getResource("res/cursor.png"));
//            Cursor c = toolkit.createCustomCursor(image , new Point(this.getX(), 
//                       this.getY()), "cursor");
//            this.setCursor (c);
        
        DebugConsole.println(String.format("Snake version: %.2f, Build number %d", VERSION, BUILD));
        snakeLength = Options.getGeneralInt("snake_startlength");
                    
        graphicsPanel = (GraphicsPanel)gPanel;
        graphicsPanel.setup(30);
        graphicsPanel.setTileSize(Options.getGraphicInt("tile_size_screen"));
        graphicsPanel.repaint();
        
        r = new Random();
        
        arcadeLevel = new Level(
                        this.getInsets(),new Color(70,0,130), null);
        arcadeLevel.setParent(this);
        arcadeLevel.setSizeInTiles(new Dimension(
			Options.getGeneralInt("level_size_width"), 
			Options.getGeneralInt("level_size_height")));
        
        
        Tile star = new Tile();
        star.setAbsoluteTileCoords(true);
        star.setAbsolutePosition(true);
        star.setIsAnimated(true);
        star.setTileScreenSize(new Dimension(256, 256));
        star.setTileSize(new Dimension(32,32));
        star.addFrame(new Point(184,48), 50);
        star.addFrame(new Point(216,48), 50);
        star.addFrame(new Point(184,80), 50);
        star.addFrame(new Point(216,80), 50);
        star.addFrame(new Point(184,112), 50);
        star.addFrame(new Point(216,112), 50);
        star.addFrame(new Point(184,144), 50);
        star.addFrame(new Point(216,144), 50);
        star.addFrame(new Point(184,176), 50);
        star.addFrame(new Point(216,176), 50);
        star.addFrame(new Point(184,208), 50);
        star.addFrame(new Point(216,208), 50);
        star.addFrame(new Point(184,240), 50);
        star.addFrame(new Point(216,240), 50);
        star.addFrame(new Point(184,272), 50);
        star.addFrame(new Point(216,272), 50);
       
        
        mainMenu = new Menu(Color.CYAN, star){
            @Override
            public void actionPerformed(ActionEvent e) {
                super.actionPerformed(e);
                switch(e.getActionCommand()){
                    case "options":
                        goTo(optionsMenu);
                        break;
                }
            }
            
        };
        mainMenu.setParent(this);
        mainMenu.setSizeInTiles(new Dimension(Options.getGeneralInt("level_size_width"),Options.getGeneralInt("level_size_height")));
        mainMenu.addButton(new Button("Single Player" , "singleplayer"), 50, 32);
        mainMenu.addButton(new Button("Multiplayer", "multiplayer"), 50 ,44);
        mainMenu.addButton(new Button("Profiles", "profiles"), 50, 56);
        mainMenu.addButton(new Button("Options", "options"),50, 68);
        mainMenu.addButton(new Button("Exit", "exit"),50, 80);
        
        
        
        Popup p = new Popup(new Point(420,715));
        p.setPopupType(Popup.Type.SPEECH);
        p.setHasStem(true);
        p.setStemUp(true);
        p.setStemLocationPercent(100);
        p.println("This is the first line");
        p.println("second line of the popupasdfasdfasdfasdfasefasefasdf");
        p.println("one More line");
        //mainMenu.setPopup(p);
        
        Popup pausePopup = new Popup(new Point(arcadeLevel.sizeX/2, arcadeLevel.sizeY/2), new Dimension(350,300));
        arcadeLevel.setPopup(pausePopup);
        pausePopup.setPopupType(Popup.Type.UTILITY);
        pausePopup.setVisible(false);
        pausePopup.println("Paused");
        pausePopup.addButton(new Button("Resume", "resume"), 50 ,30);
        pausePopup.addButton(new Button("Go Back", "back"), 50 ,70);
        pausePopup.addTile(new Tile(new Point(0,0), new Point(1,3)), 100, 100);
        
        
        players = new ArrayList<>();
        players.add(new Snake(createStartingDirection(), createStartingPoint(), snakeLength));
        //players.add(new Snake(createStartingDirection(), createStartingPoint(), snakeLength, 1));
        //players.add(new Snake(createStartingDirection(), createStartingPoint(), snakeLength, 2));
        //players.add(new Snake(createStartingDirection(), createStartingPoint(), snakeLength));
        arcadeLevel.setSnake(players);
        
        apple = new Collectable(
                Collectable.CollectableType.TYPE_ITEM,
                new Point(arcadeLevel.getFreeSpace().get(r.nextInt(arcadeLevel.getfreeSpacesNumber())))
                );
        apple.addFrame(new Point(0,2), 0);
        arcadeLevel.setItems(apple);
        arcadeLevel.sceneTick.setActionCommand("ingame");
//-----------------------------------------------------------
        
        optionsMenu = new OptionsMenu();
        
        Button saveBtn = new Button("Save settings");
        saveBtn.setActionCommand("save");

        
//-----------------------------------------------------------       
        sceneStack.push(mainMenu);
        sceneStack.push(arcadeLevel); 
        //sceneStack.push(optionsMenu);
        
        graphicsPanel.setSceneToPaint(sceneStack.peek(),false);
        this.setSize(sceneStack.peek().getScreenSize());
        graphicsPanel.repaint();
        
        sceneStack.peek().sceneTick.setActionCommand(sceneStack.peek().getActionCommand());
        sceneStack.peek().sceneTick.start();
        
        DebugConsole.setInputLine("debug scene");
        DebugConsole.submitCommand();
        
        DebugConsole.setInputLine("scene toggleresizable");
        DebugConsole.submitCommand();
    }
    
   
    private Point createStartingPoint(){
        Point p = new Point(
                r.nextInt(arcadeLevel.sizeTilesX),
                r.nextInt(arcadeLevel.sizeTilesY)
        );
        
        if(p.x == 0){
            p.x = 1;
        }
        if(p.y == 0){
            p.y = 1;
        }
        
        if(p.x < snakeLength){
            p.x = snakeLength;
        }
        
        if(p.y < snakeLength){
            p.y = snakeLength;
        }
        
        if(p.x > (arcadeLevel.getSizeX() + 1) - snakeLength){
            p.x = (arcadeLevel.getSizeX() + 1) - snakeLength;
        }
        
        if(p.y > (arcadeLevel.getSizeY() - 1) - snakeLength){
            p.y = (arcadeLevel.getSizeY() - 1) - snakeLength;
        }
        
        return p;
    }

    @Override
    public void setSize(Dimension d) {
        d.height += ins.top + ins.bottom;
        d.width += ins.left + ins.right;
        super.setSize(d); //To change body of generated methods, choose Tools | Templates.
    }
    
    
    
    private Direction createStartingDirection(){
        int dir = r.nextInt(3);
        Direction d = null;
        switch(dir){
            case 0:
                d = Direction.UP;
                break;
            case 1:
                d = Direction.DOWN;
                break;
            case 2:
                d = Direction.LEFT;
                break;
            case 3:
                d = Direction.RIGHT;
                break;
        }
        
        return d;
    }
    
    public static boolean isAlphaNumeric(KeyEvent evt){
        return evt.getKeyCode() >= 32 && evt.getKeyCode() <= 126;
    }
    
    public static boolean isNumeric(KeyEvent evt){
        return evt.getKeyCode() >= 48 && evt.getKeyCode() <= 58;
    }
    
    public void goTo(Scene s){
        sceneStack.push(s);
        graphicsPanel.setSceneToPaint(s, true);
    }
    
    public void goBack(){
        if(sceneStack.size() > 1){
            sceneStack.pop();
            graphicsPanel.setSceneToPaint(sceneStack.peek(), true);
        }
    }
    
    public void onExit(){
     //save :settings, scores etc...
     
     //then exit
     System.exit(0);
    }
    
    private void executeCommand(String commandToExec){
        String command;
        command = commandToExec;
        command = command.toLowerCase();
        
        if(command.startsWith("debug ")){
            command = command.substring(6);
            
            if(command.equals("snake")){
                if(!sceneStack.peek().sceneTick.getActionCommand().equals("debug_ingame")){
                sceneStack.peek().sceneTick.setActionCommand("debug_ingame");
                graphicsPanel.consoleTransparency = 75;
                }
                else{
                sceneStack.peek().sceneTick.setActionCommand("ingame");
                graphicsPanel.consoleTransparency = 170;
                }
                DebugConsole.submitCommand();
            }
            else if(command.equals("scene")){
                if(!sceneStack.peek().sceneTick.getActionCommand().equals("debug_ingame")){
//                sceneStack.peek().sceneTick.setActionCommand("debug_ingame");
                debugScene = !debugScene;
                }
                else{
                sceneStack.peek().sceneTick.setActionCommand("ingame");
                debugScene = false;
                }
                DebugConsole.submitCommand();
            }
            
            else{
                DebugConsole.println("Invalid arguments!");
                }
        }
        else if(command.startsWith("scene ")){
            command = command.substring(6);
            if(command.equals("toggleresizable")){
                resizable = !resizable;
                this.setResizable(resizable);
                DebugConsole.submitCommand();
                DebugConsole.println("scene resizable = " + resizable);
            }
            else{
                DebugConsole.println("Invalid arguments!");
                } 
            } 
        else if(command.startsWith("timer ")){
            command = command.substring(6);
            if(command.equals("stop")){
                sceneStack.peek().sceneTick.setActionCommand("inactive");
                DebugConsole.println("Timer stopped");
            }
            else if(command.equals("start")){
                sceneStack.peek().sceneTick.setActionCommand("ingame");
                DebugConsole.println(String.format("Timer started with interval %d", Options.getGeneralInt("snake_timer")));
            }
            else if(command.startsWith("set ")){
                int delay = Integer.parseInt(command.substring(4));
                opt.changeGeneral("snake_timer", delay);
                DebugConsole.println(String.format("Timer set with interval %d ms", delay));
                sceneStack.peek().sceneTick.setDelay(delay);
            }
            else{
                DebugConsole.println("Invalid arguments!");
            }
            DebugConsole.submitCommand();
        }
        else if(command.startsWith("edit ")){
            command = command.substring(5);
            if(command.startsWith("score ")){
                //score = Integer.parseInt(command.substring(6));
                //DebugConsole.println(String.format("Score changed to %d", score), false);
                //gameScreen = SCREEN_GAME;
                //drawFrame();
                //gameScreen = SCREEN_CONSOLE;
            }
            else if(command.startsWith("growsnake ")){
                ((Level)sceneStack.peek()).getSnakes().get(Integer.parseInt(command.substring(10))).growSnake();
            }
            else if(command.startsWith("changesnake ")){
                
                try{
                    int snake = Integer.parseInt(command.substring(12, 13));
                    command = command.substring(14,15);
                    int type = Integer.parseInt(command);
                    ((Level)sceneStack.peek()).getSnakes().get(snake).setSnakeType(type);
                }catch(Exception e){
                    DebugConsole.println("Invalid params (changesnake [snake(int)] [snaketype(int)])");
                    return;
                }
                
                
            }
            else{
                DebugConsole.println("Invalid arguments!");
            }
            DebugConsole.submitCommand();
        }
        else if(command.startsWith("cls")){
            DebugConsole.cls();
            DebugConsole.clearCommand();
        }
        else if(command.startsWith("log ")){
            command = command.substring(4);
            saveLog(command);
        }
        else if(command.startsWith("ver")){
            DebugConsole.println(String.format("Snake version: %.3f", revisionVer));
        }
        else{
            DebugConsole.println(String.format("The command \"%s\" is not valid !", command));
            DebugConsole.clearCommand();
        }
    }
    
    private synchronized void saveLog(String command){
        DebugConsole.submitCommand();
        BufferedWriter log = null;
        try{
            if(command.equals("-desktop")){
            log = new BufferedWriter(new FileWriter(String.format("%s/Snake_Console_Log.txt", System.getProperty("user.home") + "/Desktop")));
            System.out.print(System.getProperty("user.home") + "/Desktop/");
            }
            else{
            log = new BufferedWriter(new FileWriter(command));
            }
            log.write("--Snake log file--" + "\n");
            log.write("OS: " + System.getProperty("os.name") + "\n");
            log.write("Version: " + System.getProperty("os.version") + "\n");
            log.write("Archiecture: " + System.getProperty("os.arch") + "\n");
            log.write("Generated at (millis): " + System.currentTimeMillis() + "\n");
            ArrayList<String> toLog = DebugConsole.getLogToSave();
            for(String s: toLog){
                s += "\n";
                log.write(s);
            }
            log.close();
        } catch (IOException ex) {
            DebugConsole.println(String.format("Failed to save log at \"%s\" !", command.substring(4)));
        }
    }
    
    
}
